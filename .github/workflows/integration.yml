# Run secret-dependent integration tests only after /ok-to-test approval
on:
  pull_request:
  repository_dispatch:
    types: [ok-to-test]

name: Integration tests

jobs:
  integration-trusted:
    runs-on: ubuntu-latest
    # Trusted, branch-based pull request with secrets
    if: github.event.pull_request.head.repo.full_name == github.repository
    steps:

    - name: Branch based PR checkout
      uses: actions/checkout@v2
      if: github.event.pull_request.head.repo.full_name == github.repository

    # <insert an integration test needing secrets>

  integration-fork:
    runs-on: ubuntu-latest
    if: github.event_name == 'repository_dispatch'
    steps:

    - name: Fork based /ok-to-test checkout
      uses: actions/checkout@v2
      if: github.event_name == 'repository_dispatch'
      with:
        ref: 'refs/pull/${{ github.event.client_payload.pull_request.number }}/merge'

    # <insert an integration test needing secrets>
    - run: |
        echo "Integration tests... success!"
        echo '::set-env name=conclusion::success'

    # Get merge commit sha
    - uses: actions/github-script@v1
      id: get-sha
      env:
        number: ${{ github.event.client_payload.pull_request.number }}
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const { data: pull } = await github.pulls.get({
            ...context.repo,
            pull_number: process.env.number
          });
          return pull.merge_commit_sha;

    # Set check on PR
    - uses: actions/github-script@v1
      env:
        head_sha: ${{ steps.get-sha.outputs.result }}
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          github.checks.create({
            ...context.repo,
            name: 'Integration tests',
            head_sha: process.env.head_sha,
            status: 'completed',
            conclusion: process.env.conclusion
          })

    # Comment on the PR to show that repository secrets can be used
    - uses: actions/github-script@v1
      env:
        number: ${{ github.event.client_payload.pull_request.number }}
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          github.issues.createComment({
            issue_number: process.env.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: `Well, hey there! ðŸ¤  Conclusion of integration tests: ${process.env.conclusion}.`
          })